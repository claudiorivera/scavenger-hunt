generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    isDemoUser    Boolean   @default(false)

    accounts Account[]
    sessions Session[]

    collectionItems CollectionItem[]
    huntsCreated    Hunt[]
    participations  Participation[]
}

enum Role {
    USER
    ADMIN
}

model CollectionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    url    String
    width  Int
    height Int

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId String

    @@unique([userId, itemId])
    @@index([userId])
    @@index([itemId])
}

model Item {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    description String

    hunt            Hunt             @relation(fields: [huntId], references: [id], onDelete: Cascade)
    huntId          String
    collectionItems CollectionItem[]

    @@index([huntId])
}

model Hunt {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    items        Item[]
    participants Participation[]

    @@index([createdById])
}

model Participation {
    id String @id @default(cuid())

    hunt   Hunt   @relation(fields: [huntId], references: [id], onDelete: Cascade)
    huntId String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([huntId, userId])
    @@index([userId])
    @@index([huntId])
}
